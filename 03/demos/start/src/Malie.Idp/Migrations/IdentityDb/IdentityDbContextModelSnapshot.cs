// <auto-generated />
using System;
using Malie.Idp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Malie.Idp.Migrations.IdentityDb
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Malie.Idp.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Active = true,
                            ConcurrencyStamp = "8a74278e-f308-4b12-99a7-1b50c0aac571",
                            Password = "Ali$@",
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            UserName = "alisa"
                        },
                        new
                        {
                            Id = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Active = true,
                            ConcurrencyStamp = "c509cb6c-ebaf-4d2a-b5ff-ea791d127927",
                            Password = "K@dij@",
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            UserName = "kadija"
                        });
                });

            modelBuilder.Entity("Malie.Idp.Data.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c9a4ced-cc05-4115-867d-1ebc6894c89f"),
                            ConcurrencyStamp = "c9c49fcf-d384-4b5f-9799-d9a3ccc3a69c",
                            Type = "given_name",
                            UserId = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Value = "Alisa"
                        },
                        new
                        {
                            Id = new Guid("a663b155-3d53-4f6f-ad93-4f48498cfd74"),
                            ConcurrencyStamp = "d33fb3fd-4c04-4191-95fe-91845569786b",
                            Type = "family_name",
                            UserId = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Value = "Pussah"
                        },
                        new
                        {
                            Id = new Guid("13c85610-335e-47d0-9382-b17b7b2f997a"),
                            ConcurrencyStamp = "fe00bb8f-4823-4d77-bc18-86542ccf07f9",
                            Type = "address",
                            UserId = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Value = "2220 S 66th Street, Norwood, Essignton EX 11001"
                        },
                        new
                        {
                            Id = new Guid("0e0bd892-53da-4544-a7df-ca3b597e1fb1"),
                            ConcurrencyStamp = "9b994bce-2368-4aa6-b9a9-1fbaf1af6dee",
                            Type = "role",
                            UserId = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("02689ed8-a008-40bb-b943-dd3d822bff72"),
                            ConcurrencyStamp = "a12a49fb-621f-4881-8dcd-cd2a561c1a33",
                            Type = "subscriptionlevel",
                            UserId = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("e6a0e4a0-c60a-43dd-ab1d-1efa7dc27249"),
                            ConcurrencyStamp = "9c1d66f2-b41d-409b-a574-d25609bf5e4f",
                            Type = "country",
                            UserId = new Guid("ad23ce84-d9f8-4135-ab35-a8d03a831819"),
                            Value = "us"
                        },
                        new
                        {
                            Id = new Guid("cfe0c4d4-b14e-4cab-bf36-0feee7bbf582"),
                            ConcurrencyStamp = "746c1502-e395-4bd6-ae2d-a2c3522f26dc",
                            Type = "given_name",
                            UserId = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Value = "Kadija"
                        },
                        new
                        {
                            Id = new Guid("bbc52e08-f304-488b-bf67-09aeb93661e8"),
                            ConcurrencyStamp = "9e792d9b-9f93-4450-81f8-67eaa55906fc",
                            Type = "family_name",
                            UserId = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Value = "Pussah"
                        },
                        new
                        {
                            Id = new Guid("c4a53a33-2e61-4107-873c-d479a71cb416"),
                            ConcurrencyStamp = "8ca0e43d-9c61-468e-a6b3-288c515fce6b",
                            Type = "address",
                            UserId = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Value = "2220 S 66th Street, Norwood, Essignton EX 11001"
                        },
                        new
                        {
                            Id = new Guid("7ff64692-7a36-4b1e-95e4-da64b7585609"),
                            ConcurrencyStamp = "54a5bd94-5651-479e-9bc8-dc489bd76d60",
                            Type = "role",
                            UserId = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("7eb84ff9-3729-4b8e-83f5-fefb5109a2fb"),
                            ConcurrencyStamp = "052392b7-08df-4a02-b603-54f81f454f30",
                            Type = "subscriptionlevel",
                            UserId = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("8920b60c-5c0a-4864-bb94-425aecbf1e14"),
                            ConcurrencyStamp = "dbbd24ea-022a-429f-8a91-3d12fce37458",
                            Type = "country",
                            UserId = new Guid("0adf529e-92eb-47bd-ba32-a6dc55589fc0"),
                            Value = "be"
                        });
                });

            modelBuilder.Entity("Malie.Idp.Data.UserClaim", b =>
                {
                    b.HasOne("Malie.Idp.Data.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
